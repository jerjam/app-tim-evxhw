#!/usr/bin/python   

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Configuration
selfthis = "volatile struct MrfErRegs"
selftype = "evr_EvrObject"
obthis = "self->pEvr"
methodtablename = 'EvrMethods'
no_body = ['EvrRamRead','EvrRamReadAuto','EvrRamWrite','EvrRamWriteAuto','EvrSendTxDBuf','EvrGetDBuf','EvrGetFIFOEvent']

# import parse
import genc

fndeclarations, methodtable, fnbodies = genc.parseFile("erapi.h", selfthis, selftype, obthis, methodtablename, no_body)

fndeclarations += 'static PyObject *mod_EvrClose(evr_EvrObject* self);\n'
methodtable += '{"Close", (PyCFunction)mod_EvrClose, METH_NOARGS, "Closes the device"},\n'

fndeclarations += 'static PyObject *mod_EvrIrqHandled(evr_EvrObject* self);\n'
methodtable += '{"IrqHandled", (PyCFunction)mod_EvrIrqHandled, METH_NOARGS, "Should be called to inform the device the last interrupt has been managed so it knowns tha next one can be generated."},\n'

fndeclarations += 'static PyObject *mod_EvrIrqAssignHandler(evr_EvrObject* self);\n'
methodtable += '{"IrqAssignHandler", (PyCFunction)mod_EvrIrqAssignHandler, METH_NOARGS, "Should be called once if the process wants to manage interrupts generated by the current device"},\n'

fndeclarations += 'static PyObject *mod_EvrGetSerialNumber(evr_EvrObject* self);\n'
methodtable += '{"GetSerialNumber", (PyCFunction)mod_EvrGetSerialNumber, METH_NOARGS, "Returns the serial number of the device"},\n'

fndeclarations += 'static PyObject *mod_EvrGetFIFOEvent(evr_EvrObject* self);\n'
methodtable += '{"GetFIFOEvent", (PyCFunction)mod_EvrGetFIFOEvent, METH_NOARGS, "Pops an element from the FIFO"},\n'



print fndeclarations
print 'static PyMethodDef '+methodtablename+'[] = {'
print methodtable
print '{NULL, NULL, 0, NULL}  };'
print fnbodies
